import nltk
#a) If Angus sings, it is not the case that Bertie sulks.
lp=nltk.LogicParser()
AngusSings=lp.parse ('Angus')
BertieNotSulks=lp.parse('-Bertie')
R=lp.parse('Angus -> Bertie')
prover=nltk.Prover9()
print "a)", prover.prove(BertieNotSulks,[AngusSings,R])
#b) Cyril runs and barks.
lp=nltk.LogicParser()
CyrilRuns=lp.parse('Runs')
CyrilBarks=lp.parse('Barks')
R=lp.parse('Runs & Barks')
prover=nltk.Prover9()
print "b)", prover.prove(Runs,[R])
#c)It will snow if it doesn’t rain.
lp=nltk.LogicParser()
Snow=lp.parse('Snow')
NotRain=lp.parse('-Rain')
R=lp.parse('Snow -> -Tain')
prover=nltk.Prover9()
print "c)", prover.prove(NotRain,[Snow, R])
#d) It’s not the case that Irene will be happy if Olive or Tofu comes.
lp=nltk.LogicParser()
NotIrene=lp.parse('-Irene')
OliveComes=lp.parse('Olive')
TofuComes=lp.parse('Tofu')
OliveOrTofu=lp.parse('Olive|Tofu')
R=lp.parse('-Irene -> Olive|Tofu')
R=lp.parse('Snow -> -Tain')
prover=nltk.Prover9()
print "c)", prover.prove(OliveOrTofu,[NotIrene, R])
#e)Pat didn’t cough or sneeze.
lp=nltk.LogicParser()
NotCough=lp.parse('-PatCough') 
NotSneeze=lp.parse('-PatSneeze')
R=lp.parse('-PatCough|-PatSneeze')
prover=nltk.Prover9()
print "e)", prover.prove(R, [NotCough, NotSneeze])
#f) If you don’t come if I call, I won’t come if you call.
lp=nltk.LogicParser()
YouNotCome=lp.parse('-YouCome -> -ICome') 
INotCome=lp.parse('-ICome -> -YouCome')
R=lp.parse('(-YouCome -> -ICome)<->(-ICome -> -YouCome)')
prover=nltk.Prover9()
print "f)", prover.prove(R, [YouNotCome, INotCome])
